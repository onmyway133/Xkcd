//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    /// Resource file `xkcdRegular.otf`.
    static let xkcdRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "xkcdRegular", pathExtension: "otf")
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "xkcdRegular", withExtension: "otf")`
    static func xkcdRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xkcdRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `xkcd-Regular`.
    static let xkcdRegular = Rswift.FontResource(fontName: "xkcd-Regular")
    
    /// `UIFont(name: "xkcd-Regular", size: ...)`
    static func xkcdRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: xkcdRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.xkcdRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'xkcd-Regular' could not be loaded, is 'xkcdRegular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `comics`.
    static let comics = Rswift.ImageResource(bundle: R.hostingBundle, name: "comics")
    /// Image `favoriteBackground`.
    static let favoriteBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoriteBackground")
    /// Image `favorites`.
    static let favorites = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorites")
    /// Image `hint`.
    static let hint = Rswift.ImageResource(bundle: R.hostingBundle, name: "hint")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `starred`.
    static let starred = Rswift.ImageResource(bundle: R.hostingBundle, name: "starred")
    /// Image `unstar`.
    static let unstar = Rswift.ImageResource(bundle: R.hostingBundle, name: "unstar")
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comics", bundle: ..., traitCollection: ...)`
    static func comics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favoriteBackground", bundle: ..., traitCollection: ...)`
    static func favoriteBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favorites", bundle: ..., traitCollection: ...)`
    static func favorites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorites, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hint", bundle: ..., traitCollection: ...)`
    static func hint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "starred", bundle: ..., traitCollection: ...)`
    static func starred(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starred, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unstar", bundle: ..., traitCollection: ...)`
    static func unstar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unstar, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 3 localization keys.
    struct localizable {
      /// Value: Comics
      static let comicsTitle = Rswift.StringResource(key: "comics.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Favorites
      static let favoriteTitle = Rswift.StringResource(key: "favorite.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading...
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Comics
      static func comicsTitle(_: Void = ()) -> String {
        return NSLocalizedString("comics.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Favorites
      static func favoriteTitle(_: Void = ()) -> String {
        return NSLocalizedString("favorite.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Loading...
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("loading", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
